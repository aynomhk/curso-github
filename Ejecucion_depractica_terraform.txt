C:\Users\Terraform\Practica_modulos>terraform init
╷
│ Error: Unsupported Terraform Core version
│
│   on versions.tf line 5, in terraform:
│    5: required_version = "~> 0.12.20"
│
│ This configuration does not support Terraform version 1.2.4. To proceed, either choose another supported Terraform
│ version or update this version constraint. Version constraints are normally set for good reason, so updating the
│ constraint may lead to other errors or unexpected behavior.
╵


C:\Users\Terraform\Practica_modulos>terraform -version
Terraform v1.2.4
on windows_amd64

C:\Users\Terraform\Practica_modulos>terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/null versions matching "~> 2.1"...
- Installing hashicorp/null v2.1.2...
- Installed hashicorp/null v2.1.2 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\Terraform\Practica_modulos>terraform plan

Changes to Outputs:
  + count           = []
  + for_each        = {}
  + list_of_strings = []
  + module_enabled  = true
  + single          = {}

You can apply this plan to save these new output values to the Terraform state, without changing any real
infrastructure.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these
actions if you run "terraform apply" now.

C:\Users\Terraform\Practica_modulos>terraform apply

Changes to Outputs:
  + count           = []
  + for_each        = {}
  + list_of_strings = []
  + module_enabled  = true
  + single          = {}

You can apply this plan to save these new output values to the Terraform state, without changing any real
infrastructure.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes


Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

count = []
for_each = {}
list_of_strings = tolist([])
module_enabled = true
single = {}
string = ""

C:\Users\Terraform\Practica_modulos>